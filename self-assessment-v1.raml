#%RAML 0.8
title: Self Assessment
version: v1
mediaType: application/json
protocols:
  - HTTPS
documentation:
  - title: Overview
    content: |
      This REST API allows clients to post information related to a taxpayer, and then get an estimated tax liability calculation for a tax period.

      This is for the April MVP.
  - title: Terminology
    content: |

      * A **Source Of Income** is something that can provide income to a taxpayer. This might be UK property, or an employment for example.
      * A **Summary** is the sum of transactions from a ledger. These are grouped by type (e.g. income or expenses), and by category (e.g. salary or rent).
      * A **Declaration** is created to declare that the source and summary information sent so far for the tax year are correct.

  - title: Workflow
    content: |
      A typical **update process** would be:

      1. Authenticate.
      1. Create any income **sources** you need (e.g. employment or property).
      1. Create **summaries** for any recent transactions.
      1. Update any **summaries** that need amending.
      1. Update any **sources** for the the current tax year, e.g. set allowances, adjustments, reliefs.
      1. Update any once per year details.
      1. Create a **declaration** to confirm the quartely update is complete
      1. Request a **liability** calculation.
      1. Wait for the calculation to complete.
      1. Get the liability and display it to your user.

      The **end of year process** would be the above, plus:

      1. At the end of the year, mark the tax year as complete.

      Sources and summaries will be given IDs. Do not expect these to be GUIDs. They will only be unique within context. I.e. source IDs will be unique for that type of source and within that self-assessment. Similarly, summary IDs will be unique for that type of summary within its source.

      You will need to store these IDs within your application for disambiguation and reconciliation.

  - title: Considerations
    content: |
      * We do not expect or want you to submit transaction level information (if fact, we may limit the amount of data you can send). How will you aggregate this information within your software?
      * How does your application deal with lost HTTP requests or responses?
      * How do you reconcile your data with our data?
      * The API doesn't expose meta-data or audit information (e.g. created or update times, who made the change). Do you need to record this audit information yourself?
      * Your application may not be the only application access and modifying a taxpayer's data. How would you differentiate different data from your application and others?
schemas:
  - Money: |
      { "$schema": "http://json-schema.org/schema",
        "title": "A monetary amount is UK pounds sterling",
        "type": "number"
      }
  - NonFinancial: |
      { "$schema": "http://json-schema.org/schema",
        "properties": {
            "businessDetailsChanged": {"type": "boolean", "default": false},
            "totalProfitLessThan5965": {"type": "boolean", "default": false},
            "iAmPayingClass4Nics": {"type": "boolean", "default": false}
        },
        "required": [],
        "additionalProperties": false
      }
  - Source: |
      { "$schema": "http://json-schema.org/schema",
        "title": "A source of income",
        "properties": {
          "id": {"type": "string"}
        },
        "required": ["id"],
        "additionalProperties": false
      }
    # only some allowances apply to certain sources of income
  - Allowances: |
      { "$schema": "http://json-schema.org/schema",
        "title": "Allowances",
        "properties": {
          "allowancesOnSales": {"$ref": "Money", "default": 0},
          "annualInvestmentAllowance": {"$ref": "Money", "default": 0},
          "businessPremisesRenovationAllowance": {"$ref": "Money", "default": 0},
          "capitalAllowanceMainPool": {"$ref": "Money", "default": 0},
          "capitalAllowanceSpecialRatePool": {"$ref": "Money", "default": 0},
          "captialAllowances": {"$ref": "Money", "default": 0},
          "enhancedCapitalAllowance": {"$ref": "Money", "default": 0},
          "restrictedCapitalAllowance": {"$ref": "Money", "default": 0},
          "allowanceForSmallBalanceOfUnrelievedExpenditure": {"$ref": "Money", "default": 0}
        },
        "required": [],
        "additionalProperties": false
      }
    # only some adjustments apply to certain sources of income
  - Adjustments: |
      { "$schema": "http://json-schema.org/schema",
        "title": "Adjustments",
        "properties": {
          "accountingAdjustment": {"$ref": "Money", "default": 0},
          "adjustmentToProfits": {"$ref": "Money", "default": 0},
          "averagingAdjustment": {"$ref": "Money", "default": 0},
          "basisAdjustment": {"$ref": "Money", "default": 0},
          "includedNonTaxableProfits": {"$ref": "Money", "default": 0},
          "lossBroughtForward": {"$ref": "Money", "default": 0},
          "outstandingBusinessIncome": {"$ref": "Money", "default": 0},
          "overlapReliefUsed": {"$ref": "Money", "default": 0}
        },
        "required": [],
        "additionalProperties": false
      }
  - Sources: |
      { "$schema": "http://json-schema.org/schema",
        "type": "array",
        "items": {
          "$ref": "Source"
        }
      }
    # only some categories are allowed for some source type and summary type
  - Income: |
      { "$schema": "http://json-schema.org/schema",
        "title": "A summary of income transactions taken from a ledger",
        "properties": {
          "id": {"type": "string"},
          "category": {
            "type": "string",
            "enum": [
              "Turnover",
              "Other"
            ]
          },
          "amount": {"$ref": "Money"},
          "taxDeductedamount": {"$ref": "Money", "default": 0},
          "from": {"type": "string"},
          "to": {"type": "string"}
        },
        "required": ["id", "category", "amount", "from", "to"],
        "additionalProperties": false
      }
  - Deduction: |
      { "$schema": "http://json-schema.org/schema",
        "title": "A summary of deductions (e.g. expenses) transactions taken from a ledger",
        "properties": {
          "id": {"type": "string"},
          "category": {
            "type": "string",
            "enum": [
              "AdminCosts",
              "AdvertisingCosts",
              "BadDebt",
              "CISPayments",
              "CoGBought",
              "CostOfServices",
              "Depreciation",
              "FinancialCosts",
              "FixedDeductions",
              "Interest",
              "MaintenanceCosts",
              "Other",
              "PremisesRunningCosts",
              "ProfessionalFees",
              "RepairsAndMaintenance",
              "StaffCosts",
              "TravelAndSubsistence",
              "TravelCosts"
            ]
          },
          "amount": {"$ref": "Money"},
          "disallowableAmount": {"$ref": "Money", "default": 0},
          "from": {"type": "string"},
          "to": {"type": "string"}
        },
        "required": ["id", "category", "amount", "from", "to"],
        "additionalProperties": false
      }
  - Benefit: |
      { "$schema": "http://json-schema.org/schema",
        "title": "A summary of benefit transactions taken from a ledger",
        "properties": {
          "id": {"type": "string"},
          "category": {
            "type": "string",
            "enum": [
              "Accommodation",
              "CompanyVehicle",
              "ExpensesPayments",
              "Fuel",
              "GoodsProvidedByEmployer",
              "Other",
              "PrivateInsurance",
              "VouchersCCAndExcessMileage"
            ]
          },
          "amount": {"$ref": "Money"},
          "from": {"type": "string"},
          "to": {"type": "string"}
        },

        "required": ["id", "category", "from", "to"],
        "additionalProperties": false
      }
  - Declaration: |
      { "$schema": "http://json-schema.org/schema",
        "title": "A declaration that the data is up to date",
        "properties": {
            "to": {"type": "string"}
        },
        "required": ["to"],
        "additionalProperties": false
      }
  - Liability: |
      { "$schema": "http://json-schema.org/schema",
        "title": "A tax liability",
        "properties": {
          "totalTaxDue": {"$ref": "Money"}
        },
        "required": ["totalTaxDue"],
        "additionalProperties": false
      }
/self-assessments/{nino}:
  uriParameters:
    nino:
      type: string
      displayName: National Insurance Number
  /{sourceType}:
    uriParameters:
      sourceType:
        displayName: The source of income.
        type: string
        enum:
          - self-employment
          - uk-properties
          - furnished-holiday-lettings
          - dividends
          - savings
          - other
        required: true
    get:
      description: List sources of income
      responses:
        200:
          body:
            application/json:
              schema: Sources
              example: |
                [
                  {
                    "id": 2
                  }
                ]
    post:
      description: Create a new source of income
      body:
        application/json:
          schema: Source
          example: |
            {
            }
      responses:
        201:
          headers:
            Location:
              example: "./2"
    /{sourceId}:
      uriParameters:
        sourceId:
          type: string
          required: true
      get:
        description: Get a source of income
        responses:
          200:
            body:
              application/json:
                schema: Source
                example: |
                  {
                    "id": "0001"
                  }
      put:
        description: Update a source of income
        body:
          application/json:
            schema: Source
        responses:
          204:
      delete:
        description: Delete a source of income
        responses:
          204:
      /allowances/{taxYear}:
        uriParameters:
          taxYear:
            type: string
        get:
          description: Get allowances for a source of income
          responses:
            200:
              body:
                application/json:
                  schema: Allowances
        put:
          description: Set allowances for a souce of income
          body:
            application/json:
              schema: Allowances
          responses:
            204:
      /adjustments/{taxYear}:
        uriParameters:
          taxYear:
            type: string
        get:
          description: Get adjustments for a source of income
          responses:
            200:
              body:
                application/json:
                  schema: Adjustments
        put:
          description: Set adjustments for a source of income
          body:
            application/json:
              schema: Adjustments
          responses:
            204:
      /incomes:
        get:
          description: List incomes for a source of income
          responses:
            200:
              body:
                application/json:
                  example: |
                    {
                      "id": 3,
                      "type": "Turnover",
                      "amount": 10.20,
                      "from": "2016-07-01",
                      "to": "2016-08-01"
                    }
        post:
          description: Create a income for a source
          body:
            application/json:
              schema: Income
          responses:
            201:
              headers:
                Location:
                  example: "./3"
        /{summaryId}:
          uriParameters:
              summaryId:
                type: string
                required: true
          get:
            description: Get income
            responses:
              200:
                body:
                  application/json:
                    schema: Income
                    example: |
                      {
                        "id": 3,
                        "type": "Turnover",
                        "amount": 10.20,
                        "from": "2016-07-01",
                        "to": "2016-08-01"
                      }
          put:
            description: Update income
            body:
              application/json:
                schema: Income
            responses:
              204:
      /deductions:
        get:
          description: List deductions for a source of income
          responses:
            200:
              body:
                application/json:
                  example: |
                    {
                      "id": 3,
                      "type": "Rent",
                      "amount": 10.20,
                      "disallowableAmount": 0,
                      "from": "2016-07-01",
                      "to": "2016-08-01"
                    }
        post:
          description: Create an deduction for a source
          body:
            application/json:
              schema: Deduction
          responses:
            201:
              headers:
                Location:
                  example: "./3"
        /{summaryId}:
          uriParameters:
            summaryId:
              type: string
              required: true
          get:
            description: Get a deduction
            responses:
              200:
                body:
                  application/json:
                    schema: Deduction
                    example: |
                      {
                        "id": 3,
                        "type": "Rent",
                        "amount": 10.20,
                        "from": "2016-07-01",
                        "to": "2016-08-01"
                      }
          put:
            description: Update deduction
            body:
              application/json:
                schema: Deduction
            responses:
              204:
      /benefits:
        get:
          description: List benefits for a source of income
          responses:
            200:
              body:
                application/json:
                  example: |
                    {
                      "id": 3,
                      "type": "PrivateInsurance",
                      "amount": 10.20,
                      "from": "2016-07-01",
                      "to": "2016-08-01"
                    }
        post:
          description: Create an benefit for a source
          body:
            application/json:
              schema: Benefit
          responses:
            201:
              headers:
                Location:
                  example: "./3"
        /{summaryId}:
          uriParameters:
            summaryId:
              type: string
              required: true
          get:
            description: Get a benefit
            responses:
              200:
                body:
                  application/json:
                    schema: Deduction
                    example: |
                      {
                        "id": 3,
                        "type": "PrivateInsurance",
                        "amount": 10.20,
                        "from": "2016-07-01",
                        "to": "2016-08-01"
                      }
          put:
            description: Update deduction
            body:
              application/json:
                schema: Benefit
            responses:
              204:
  /non-financials/{taxYear}:
    get:
      description: Get non-financial data
      body:
        application/json:
          schema: NonFinancial
    put:
      description: Set non-financial data
      body:
        application/json:
          schema: NonFinancial
  /declarations:
    post:
      description: Create a declaration
      body:
        application/json:
          schema: Declaration
      responses:
        201:
          body:
            application/json:
              example: |
                {
                  "_links": {
                    "liability": "..."
                  },
                  "_embedded": {
                    "liability": {
                    }
                  }
                }
    get:
      description: List declarations
      responses:
        200:
          body:
            application/json:
              example: |
                [
                  {
                    "id": "0001",
                    "date": "2016-09-29",
                    "_links": {
                      "liability": "..."
                    }
                  }
                ]
  /liabilites/{id}:
      uriParameters:
        id:
          displayName: The liability ID
      get:
        description: Get a liability
        responses:
          200:
            body:
              application/json:
                schema: Liability
      patch:
        description: Correct/challenge the total tax due
        body:
          application/json:
            schema: Liability
        responses:
          200:
